[{"C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\index.js":"1","C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\App.js":"2","C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\serviceWorker.js":"3","C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\components\\Search.js":"4","C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\components\\PageNavigation.js":"5"},{"size":452,"mtime":499166100000,"results":"6","hashOfConfig":"7"},{"size":225,"mtime":1577907732562,"results":"8","hashOfConfig":"7"},{"size":5003,"mtime":499166100000,"results":"9","hashOfConfig":"7"},{"size":8682,"mtime":1578853383935,"results":"10","hashOfConfig":"7"},{"size":909,"mtime":1578766866348,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1kx21s5",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\index.js",[],["25","26"],"C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\App.js",[],"C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\serviceWorker.js",[],"C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\components\\Search.js",["27"],"import React from 'react';\r\nimport axios from 'axios';\r\nimport Loader from '../loading.gif';\r\nimport PageNavigation from './PageNavigation.js';\r\n//import Details from './PageNavigation.js';\r\n\r\nclass Search extends React.Component {\r\n    \r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.state={\r\n            query: '',\r\n            results:{},\r\n            results2:{},\r\n            loading: false,\r\n            message: '',\r\n            totalResults: 0,\r\n            totalPages: 0,\r\n            currentPageN: 0,\r\n            show:false,\r\n        };\r\n\r\n        this.cancel= '';\r\n    }\r\n\r\n    getPageCount = ( total, denominator ) => {\r\n        const divisible = 0 === total % denominator;\r\n        const valueToBeAdded = divisible ? 0: 1;\r\n        return Math.floor( total/denominator ) + valueToBeAdded;\r\n    }\r\n\r\n    /* 6d4b5d48ae4cf0c60344d2244ba8e195\r\n    https://api.themoviedb.org/3/search/movie?api_key=6d4b5d48ae4cf0c60344d2244ba8e195&language=en-US&query=infinity&page=1\r\n    */\r\n    fetchSearchResults = (updatedPageNo = '', query) =>{\r\n        const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : '';\r\n        const searchUrl = `https://api.themoviedb.org/3/search/movie?api_key=6d4b5d48ae4cf0c60344d2244ba8e195&language=en-US&query=${query}${pageNumber}`;\r\n\r\n        if( this.cancel ){\r\n            this.cancel.cancel();\r\n        }\r\n\r\n        this.cancel = axios.CancelToken.source();\r\n\r\n        axios.get( searchUrl, {\r\n            cancelToken: this.cancel.token\r\n        })\r\n            .then( res=>{\r\n                const total = res.data.total_results;\r\n                const totalPagesCount = this.getPageCount( total, 20 );\r\n                /* const totalPagesCount = res.data.total_pages; probar despues */\r\n                console.warn( res.data );\r\n                const resultNotFoundMsg = ! res.data.results.length ? 'There are no more search results.' : '';\r\n                this.setState({\r\n                    results: res.data.results,\r\n                    message: resultNotFoundMsg,\r\n                    totalResults: total,\r\n                    totalPages: totalPagesCount,\r\n                    currentPageN: updatedPageNo,\r\n                    loading: false,\r\n                    show: false,\r\n                })\r\n                \r\n            })\r\n            .catch( error=>{\r\n                if(axios.isCancel(error) || error ){\r\n                    this.setState({\r\n                        loading: false,\r\n                        message: ' ',/* Failed to fetch the data. Please check network */\r\n                    })\r\n                }\r\n            } )\r\n    };\r\n\r\n    handleOnInputChange = ( event ) => {\r\n        const query = event.target.value;\r\n        if(!query){\r\n            this.setState({query, results:{}, message:''})\r\n        }else{\r\n            this.setState({query:query, loading:true, message: '' },  ()=>{\r\n                this.fetchSearchResults(1,query);\r\n            } );\r\n        }\r\n    };\r\n\r\n    handlePageClick = ( type , /*event*/ ) => {\r\n        //event.preventDefault();\r\n        const updatedPageNo = 'prev' === type ? this.state.currentPageN - 1 : this.state.currentPageN + 1;\r\n\r\n        if( ! this.state.loading ){\r\n            this.setState({loading: true, message:'' }, () => {\r\n                this.fetchSearchResults( updatedPageNo, this.state.query );\r\n            });\r\n        }\r\n    };\r\n\r\n    renderSearchResults = () => {\r\n        const {results} = this.state;\r\n        if( Object.keys(results).length && results.length){\r\n            return(\r\n                <div className=\"results-container\">\r\n                    { results.map( result=> {\r\n                        const x = \"https://image.tmdb.org/t/p/w185\";\r\n                        const alttext = \" poster image\";\r\n                        return(\r\n                            //https://api.themoviedb.org/3/search/movie?api_key=6d4b5d48ae4cf0c60344d2244ba8e195&language=en-US&query=infinity&page=1\r\n                            // imagen https://image.tmdb.org/t/p/w600_and_h900_bestv2 + result.poster_path\r\n                            <p key={result.id} /*href={result.title}*/ className=\"result-item\">\r\n                                <h6 className=\"pic-tittle\">{result.title}</h6>\r\n                                <div className=\"img-cont\">\r\n                                <img className=\"img\" src={x+result.poster_path} alt={result.title+alttext}/>\r\n                                <p class=\"cuerpo\">{result.overview} <p></p> <button class=\"moreinfo\" onClick={()=>{this.changeShow(); this.showResults(result.id)}}>More info</button></p>\r\n                                </div>\r\n                            </p>\r\n                        )\r\n                    } )}\r\n                </div>\r\n            )\r\n        }\r\n    };\r\n    \r\n    changeShow(){\r\n            this.state.show = true\r\n    }\r\n\r\n    showResults(url){\r\n\r\n        const x = \"https://image.tmdb.org/t/p/w780\";\r\n        const alttext = \" poster image\";\r\n        const neourl = `https://api.themoviedb.org/3/movie/${url}?api_key=6d4b5d48ae4cf0c60344d2244ba8e195&language=en-US`;\r\n\r\n        axios.get(neourl).then( res=>{\r\n            //const total = res.data.total_results;\r\n            console.warn( res.data );\r\n            this.setState({\r\n                results2: res.data,\r\n            })\r\n\r\n            document.body.scrollTop = 0;\r\n            document.documentElement.scrollTop = 0;\r\n\r\n        })\r\n            return(\r\n                <div itemID=\"objdet\" className={`infowindow ${this.state.show ? 'show' : 'hide'}`}>\r\n                \r\n                <div class=\"box\">\r\n                <h1 id=\"title\">{this.state.results2.title}</h1>\r\n                <img className=\"detailimg\" itemID=\"img\" src={x+this.state.results2.poster_path} alt={this.state.results2.title+alttext}/>\r\n                <p></p>\r\n                <h2 class=\"strong\"><strong>Synopsis: </strong></h2>\r\n                <p id=\"sinop\">{this.state.results2.overview}</p>\r\n                <h2 class=\"strong2\"><strong>Average Score: </strong></h2>\r\n                <h3><p id=\"score\">{this.state.results2.vote_average}</p></h3>\r\n                <h2 class=\"strong3\"><strong>Release date: </strong></h2>\r\n                <p id=\"release\">{this.state.results2.release_date}</p>\r\n                <button className=\"button\" onClick={()=>{\r\n                    this.setState({show:false})\r\n                }}>Hide info</button>\r\n                </div>\r\n                </div>\r\n                \r\n            )\r\n\r\n    };\r\n\r\n    render(){\r\n\r\n        const { query, loading, message, currentPageN, totalPages } = this.state;\r\n\r\n        const showPrevLink = 1 < currentPageN;\r\n        const showNextLink = totalPages > currentPageN;\r\n        \r\n\r\n        return(\r\n            \r\n            <div className=\"container\">\r\n                {/*heading*/}\r\n                <h1 className=\"heading\">The Movie Database</h1>\r\n                {/*Search input */}\r\n                <label className=\"search-label\" htmlFor=\"search-input\">\r\n                    <input \r\n                        type=\"text\"\r\n                        name=\"query\"\r\n                        value={query}\r\n                        id=\"search-input\"\r\n                        placeholder=\"Search...\"\r\n                        onChange={this.handleOnInputChange}\r\n                    />\r\n                    <i class=\"fas fa-search search-icon\"/>\r\n                </label>\r\n                {/*error message*/}\r\n                {message && <p classname=\"err-message\">{message}</p>}\r\n\r\n                {/*show or hide loading gif*/}\r\n                <img src={Loader} alt=\"loading gif\" className={`loading-gif ${loading ? 'show' : 'hide' } `}/>\r\n\r\n\r\n\r\n\r\n                {/*Navigation*/}\r\n                <PageNavigation\r\n                    loading={loading}\r\n                    showPrevLink={showPrevLink}\r\n                    showNextLink={showNextLink}\r\n                    handlePrevClick={() => this.handlePageClick('prev'/*, event*/)}\r\n                    handleNextClick={() => this.handlePageClick('next'/*, event*/)}\r\n                />\r\n\r\n                {/*print results */}\r\n                {this.renderSearchResults()}\r\n                {this.showResults()}\r\n                 {/*Navigation*/}\r\n                <PageNavigation\r\n                    loading={loading}\r\n                    showPrevLink={showPrevLink}\r\n                    showNextLink={showNextLink}\r\n                    handlePrevClick={() => this.handlePageClick('prev'/*, event*/)}\r\n                    handleNextClick={() => this.handlePageClick('next'/*, event*/)}\r\n                />\r\n\r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","C:\\Users\\Usuario\\pruebapau\\finalpr\\src\\components\\PageNavigation.js",["28","29","30"],"import React from 'react';\r\n\r\nexport default (props) => {\r\n    const{\r\n        loading,\r\n        showPrevLink,\r\n        showNextLink,\r\n        handlePrevClick,\r\n        handleNextClick,\r\n    }= props;\r\n    \r\n    return(\r\n        <div className=\"nav-link-container\">\r\n            <a \r\n                href=\"#\" \r\n                className={\r\n                    `navlink ${showPrevLink ? 'show' : 'hide'}\r\n                    ${loading ? 'greyed-out' : ' '}`\r\n                }\r\n                onClick={handlePrevClick}\r\n            >\r\n                Prev\r\n            </a>\r\n\r\n            <a \r\n                href=\"#\" \r\n                className={\r\n                    `navlink ${showNextLink ? 'show' : 'hide'}\r\n                    ${loading ? 'greyed-out' : ' '}`\r\n                }\r\n                onClick={handleNextClick}\r\n            >\r\n                Next\r\n            </a>\r\n        </div>\r\n    )\r\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":124,"column":13,"nodeType":"37","endLine":124,"endColumn":23},{"ruleId":"38","severity":1,"message":"39","line":3,"column":1,"nodeType":"40","endLine":37,"endColumn":2},{"ruleId":"41","severity":1,"message":"42","line":14,"column":13,"nodeType":"43","endLine":21,"endColumn":14},{"ruleId":"41","severity":1,"message":"42","line":25,"column":13,"nodeType":"43","endLine":32,"endColumn":14},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]